{"version":3,"sources":["assets/campaign.mp4","assets/multiplayer.mp4","assets/specops.mp4","logo.svg","components/slide.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Slide","video","gameMode","descrip","id","className","type","muted","loop","autoPlay","src","App","CampaignVideo","MultiplayerVideo","SpecOpsVideo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,uECA3CD,EAAOC,QAAU,IAA0B,kC,gLC2B5BC,EAzBD,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,GACzC,OACE,yBAAKC,UAAS,0BAAqBD,IACjC,yBAAKC,UAAU,SACb,2BAAIH,IAEN,yBAAKG,UAAU,0BACb,2BACEC,KAAK,YACLC,OAAK,EACLC,MAAI,EACJC,SAAS,WACTC,IAAKT,IAEP,yBAAKI,UAAU,uBACb,4BAAKH,IAEP,yBAAKG,UAAU,qBACb,2BAAIF,OCeCQ,MAzBf,WACE,OACE,yBAAKP,GAAG,aACN,kBAAC,EAAD,CACED,QAAQ,oCACRD,SAAS,WACTD,MAAOW,IACPR,GAAG,mBAEL,kBAAC,EAAD,CACED,QAAQ,wEACRD,SAAS,cACTD,MAAOY,IACPT,GAAG,sBAEL,kBAAC,EAAD,CACED,QAAQ,gDACRD,SAAS,WACTD,MAAOa,IACPV,GAAG,oBCjBSW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b979fa97.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/campaign.bc31dc9a.mp4\";","module.exports = __webpack_public_path__ + \"static/media/multiplayer.43924d9f.mp4\";","module.exports = __webpack_public_path__ + \"static/media/specops.f46e9841.mp4\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nconst Slide = ({ video, gameMode, descrip, id }) => {\n  return (\n    <div className={`slide-container ${id}`}>\n      <div className=\"label\">\n        <p>{gameMode}</p>\n      </div>\n      <div className=\"slide-container--inner\">\n        <video\n          type=\"video/mp4\"\n          muted\n          loop\n          autoPlay=\"autoplay\"\n          src={video}\n        ></video>\n        <div className=\"game-mode-container\">\n          <h1>{gameMode}</h1>\n        </div>\n        <div className=\"descrip-container\">\n          <p>{descrip}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Slide;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport CampaignVideo from \"./assets/campaign.mp4\";\nimport MultiplayerVideo from \"./assets/multiplayer.mp4\";\nimport SpecOpsVideo from \"./assets/specops.mp4\";\n\n//page imports\nimport Slide from \"./components/slide.js\";\n\nfunction App() {\n  return (\n    <div id=\"container\">\n      <Slide\n        descrip=\"Start the single player campaign.\"\n        gameMode=\"CAMPAIGN\"\n        video={CampaignVideo}\n        id=\"#CampaignVideo\"\n      />\n      <Slide\n        descrip=\"Rank up, unlock new weapons, perks, killstreaks, and much more online\"\n        gameMode=\"MULTIPLAYER\"\n        video={MultiplayerVideo}\n        id=\"#MultiplayerVideo\"\n      />\n      <Slide\n        descrip=\"Various cooperative modes and missions await.\"\n        gameMode=\"SPEC OPS\"\n        video={SpecOpsVideo}\n        id=\"#SpecOpsVideo\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./styles/styles.sass\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}